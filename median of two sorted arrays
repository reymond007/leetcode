public class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        
        int l1 = nums1.length;
        int l2 = nums2.length;
        if((l1+l2) %2 == 0)
        {
            return (helper(nums1, nums2, 0,  0,  (l1+l2)/2+1) + helper(nums1, nums2, 0,  0,  (l1+l2)/2))/2;
        }
        else
        {
            return helper(nums1, nums2, 0,  0, (l1+l2)/2+1);
        }
    }
    
    //find kth position in two sorted arrays
    public double helper(int[] nums1, int[] nums2, int start1, int start2,  int pos)
    {
        if(start1 >= nums1.length)
        {
            return nums2[start2+pos-1];
        }
        if(start2 >= nums2.length)
        {
            return nums1[start1+pos-1];
        }
        if(pos == 1)
        {
            return Math.min(nums1[start1], nums2[start2]);
        }
        
        int A_key = start1+pos/2-1 >= nums1.length ? Integer.MAX_VALUE : nums1[start1+pos/2-1];
        int B_key = start2+pos/2-1 >= nums2.length ? Integer.MAX_VALUE : nums2[start2+pos/2-1];
        
        if(A_key > B_key)
        {
             return helper(nums1, nums2, start1,  start2 + pos/2, pos-pos/2);
        }
        else
        {
             return helper(nums1, nums2, start1 + pos/2,  start2, pos-pos/2);
        }
    }
}

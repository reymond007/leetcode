public class Solution {
    /**
     * @param board: A list of lists of character
     * @param word: A string
     * @return: A boolean
     */
    public boolean exist(char[][] board, String word) {
        // write your code here
        
        if(board == null || board.length == 0 || board[0].length == 0 || word == null)
        {
            return false;
        }
        
        for(int i = 0; i < board.length; i++)
        {
            for(int j = 0; j < board[0].length; j++)
            {
                boolean map[][] = new boolean[board.length][board[0].length];
                if(dfs(board, i, j, word, 0, map))
                {
                    return true;
                }
            }
        }
        return false;
    }
    
    public boolean dfs(char[][]board, int i, int j, String word, int cur, boolean[][]map)
    {
        if(i < 0 || i >= board.length || j < 0 || j >= board[0].length || cur >= word.length())
        {
            return false;
        }
        if(board[i][j] != word.charAt(cur) || map[i][j])
        {
            return false;
        }
        
        if(cur == word.length()-1 && board[i][j] == word.charAt(cur))
        {
            return true;
        }
        
        map[i][j] = true;

        boolean check =  dfs(board, i-1, j, word, cur+1, map) || dfs(board, i+1, j, word, cur+1, map) || dfs(board, i, j-1, word, cur+1, map) || dfs(board, i, j+1, word, cur+1, map);
        
        map[i][j] = false;
        return check;
    }
}

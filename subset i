class Solution {
    /**
     * @param S: A set of numbers.
     * @return: A list of lists. All valid subsets.
     */
    public ArrayList<ArrayList<Integer>> subsets(ArrayList<Integer> S) {
        // write your code here
        
        if(S == null || S.size() == 0)
        {
            return null;
        }
        
        ArrayList<ArrayList<Integer>> results = new ArrayList<ArrayList<Integer>>();
        ArrayList<Integer> solution = new ArrayList<Integer>();
        
        Collections.sort(S);
        
        helper(results, solution, S, 0);
        return results;
    }
    
    public void helper(ArrayList<ArrayList<Integer>> results, ArrayList<Integer> solution, ArrayList<Integer> S, int start)
    {
        if(solution.size() <= S.size())
        {
            results.add(new ArrayList<Integer>(solution));
        }
        if(start == S.size())
        {
            return;
        }
        
        for(int i = start; i < S.size(); i++)
        {
            solution.add(S.get(i));
            helper(results, solution, S, i+1);
            solution.remove(solution.size()-1);
        }
    }
}

/**
 * Definition for singly-linked list with a random pointer.
 * class RandomListNode {
 *     int label;
 *     RandomListNode next, random;
 *     RandomListNode(int x) { this.label = x; }
 * };
 */
public class Solution {
    /**
     * @param head: The head of linked list with a random pointer.
     * @return: A new head of a deep copy of the list.
     */
    public RandomListNode copyRandomList(RandomListNode head) {
        // write your code here
        if(head == null)
        {
            return null;
        }
        
        RandomListNode cur = head;
        while(cur != null)
        {
            RandomListNode temp = new RandomListNode(cur.label);
            temp.next = cur.next;
            cur.next = temp;
            
            cur = cur.next.next;
        }
        
        cur = head;
        while(cur != null)
        {
            if(cur.random != null)
            {
                cur.next.random = cur.random.next;
            }
            cur = cur.next.next;
        }
        
        cur = head.next;
        while(cur != null && cur.next != null)
        {
            cur.next = cur.next.next;
            cur = cur.next;
        }
        
        return head.next;
    }
}
